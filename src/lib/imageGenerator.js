import fs from 'fs';
import path from 'path';
import OpenAI, { toFile } from 'openai';

// Configuraci√≥n de rutas
const DATA_DIR = path.resolve(process.cwd(), 'data', 'generated');

// Asegurar que existe la carpeta data/generated
if (!fs.existsSync(DATA_DIR)) {
    fs.mkdirSync(DATA_DIR, { recursive: true });
}

// Cliente OpenAI configurado
const client = new OpenAI({
    apiKey: "sk-7rXWvbPjWSQYAXJCCf8d3aD572864eEe924a8cC0C926E4De",
    baseURL: "https://api.laozhang.ai/v1"
});

/**
 * Genera una imagen AI usando OpenAI con dos im√°genes de entrada
 */
export async function generateImage({
    personImage,
    celebrityImage,
    celebrityName = '',
    extraDetails = '',
    styleId = 'que-paso-ayer-fiesta',
    quality = 'medium' // 'medium' o 'high'
}) {
    console.log('üé¨ Iniciando generaci√≥n de imagen...');
    const startTime = Date.now();
    
    try {
        // 1. Crear prompt personalizado
        const prompt = createPrompt(celebrityName, extraDetails, styleId);
        console.log('üìù Prompt generado:', prompt);

        // 2. Convertir im√°genes a formato OpenAI
        const images = [
            await toFile(personImage, 'person.png', { type: 'image/png' }),
            await toFile(celebrityImage, 'celebrity.png', { type: 'image/png' })
        ];
        console.log('üñºÔ∏è Im√°genes convertidas para OpenAI');

        // 3. Llamar a OpenAI
        console.log(`üöÄ Enviando petici√≥n a OpenAI con calidad: ${quality}...`);
        const response = await client.images.edit({
            model: "gpt-image-1",
            image: images,
            prompt,
            quality: quality, // Usar par√°metro din√°mico
            size: "1024x1024",
        });

        // 4. Procesar respuesta
        const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);
        console.log(`‚úÖ Imagen generada en ${totalTime} segundos`);

        // 5. Guardar imagen y metadatos
        const imageBase64 = response.data[0].b64_json;
        const imageBuffer = Buffer.from(imageBase64, 'base64');
        const fileName = generateFileName(styleId);
        const outputPath = await saveImage(imageBuffer, fileName);
        
        // 6. Guardar metadatos completos
        await saveImageMetadata({
            fileName,
            personImage,
            celebrityImage,
            celebrityName,
            extraDetails,
            styleId,
            prompt,
            generationTime: totalTime,
            createdAt: new Date().toISOString(),
            quality
        });

        return {
            success: true,
            imageUrl: `/api/images/${fileName}`,
            fileName,
            outputPath,
            generationTime: totalTime,
            prompt
        };

    } catch (error) {
        const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);
        console.error('‚ùå Error generando imagen:', error);
        
        return {
            success: false,
            error: error.message || 'Error desconocido en la generaci√≥n',
            generationTime: totalTime
        };
    }
}

/**
 * Crea el prompt personalizado seg√∫n el estilo y par√°metros
 */
function createPrompt(celebrityName, extraDetails, styleId) {
    const basePrompts = {
        'que-paso-ayer-fiesta': `Una foto estilo paparazzi espont√°nea y fotorrealista de m√≠ y ${celebrityName || 'una celebridad'} en una fiesta universitaria. Est√°n de pie en el s√≥tano sucio de una fraternidad. Es una toma espont√°nea con mucho movimiento activo, interacci√≥n, etc. El destello de la c√°mara sobreexpone parcialmente la imagen, d√°ndole una sensaci√≥n ca√≥tica, como de tabloide.`
    };

    let prompt = basePrompts[styleId] || basePrompts['que-paso-ayer-fiesta'];
    
    // Agregar detalles extra si los hay
    if (extraDetails.trim()) {
        prompt += ` ${extraDetails}`;
    }

    return prompt;
}

/**
 * Genera un nombre √∫nico para el archivo de salida
 */
function generateFileName(styleId) {
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 8);
    return `${styleId}_${timestamp}_${randomId}.png`;
}

/**
 * Guarda la imagen en el directorio p√∫blico
 */
async function saveImage(imageBuffer, fileName) {
    // Crear directorio si no existe
    const uploadsDir = DATA_DIR;
    if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
    }

    // Guardar imagen
    const outputPath = path.join(uploadsDir, fileName);
    fs.writeFileSync(outputPath, imageBuffer);
    
    console.log(`üíæ Imagen guardada: ${outputPath}`);
    return outputPath;
}

/**
 * Guarda los metadatos completos de la generaci√≥n
 */
async function saveImageMetadata({
    fileName,
    personImage,
    celebrityImage,
    celebrityName,
    extraDetails,
    styleId,
    prompt,
    generationTime,
    createdAt,
    quality
}) {
    try {
        // Generar nombres para las im√°genes originales
        const baseName = fileName.replace('.png', '');
        const personFileName = `${baseName}_person_original.png`;
        const celebrityFileName = `${baseName}_celebrity_original.png`;

        // Guardar im√°genes originales en data/generated
        const personPath = path.join(DATA_DIR, personFileName);
        const celebrityPath = path.join(DATA_DIR, celebrityFileName);
        
        fs.writeFileSync(personPath, personImage);
        fs.writeFileSync(celebrityPath, celebrityImage);

        // Crear objeto de metadatos completo
        const metadata = {
            generatedImage: {
                fileName,
                url: `/api/images/${fileName}`,
                createdAt,
                generationTime,
                size: fs.statSync(path.join(DATA_DIR, fileName)).size
            },
            originalImages: {
                person: {
                    fileName: personFileName,
                    url: `/api/images/${personFileName}`,
                    size: personImage.length
                },
                celebrity: {
                    fileName: celebrityFileName,
                    url: `/api/images/${celebrityFileName}`,
                    size: celebrityImage.length
                }
            },
            generation: {
                styleId,
                celebrityName: celebrityName || 'No especificado',
                extraDetails: extraDetails || 'No especificado',
                prompt,
                model: 'gpt-image-1',
                quality: quality,
                size: '1024x1024'
            },
            timestamp: Date.now(),
            version: '1.0'
        };

        // Guardar metadatos en Content Collections (src/content/generated-images/)
        const contentCollectionPath = path.join(process.cwd(), 'src', 'content', 'generated-images', `${baseName}.json`);
        fs.writeFileSync(contentCollectionPath, JSON.stringify(metadata, null, 2));

        // Tambi√©n mantener copia en data/generated/metadata para backward compatibility
        const metadataDir = path.join(DATA_DIR, 'metadata');
        if (!fs.existsSync(metadataDir)) {
            fs.mkdirSync(metadataDir, { recursive: true });
        }
        const metadataPath = path.join(metadataDir, `${baseName}_metadata.json`);
        fs.writeFileSync(metadataPath, JSON.stringify(metadata, null, 2));

        console.log(`üìã Metadatos guardados en Content Collections: ${contentCollectionPath}`);
        console.log(`üñºÔ∏è Im√°genes originales guardadas: ${personFileName}, ${celebrityFileName}`);

        return {
            contentCollectionPath,
            metadataPath,
            personPath,
            celebrityPath
        };

    } catch (error) {
        console.error('‚ùå Error guardando metadatos:', error);
        // No fallar la generaci√≥n por un error en metadatos
        return null;
    }
}